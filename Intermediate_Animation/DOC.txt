*POSSIBLE* MORPHING DATA STRUCTURES

aiMesh:
	unsigned int mMethod - Tells the method of morphing when animMeshes are specified via enum aiMorphingMethod 
	aiAnimMesh* mAnimMeshes[] - attachment meshes for the specific mesh for vertex based animation.
	unsigned int mNumAnimMeshes

aiAnimMesh:
DESC: An attachment to an aiMesh and stores per-vertex animations for a particular frame
The relationship between the Time line and animMesh is established by aiMeshAnim.
	aiVector3D mVertices[] - Replacement for aiMesh's mVertices
	unsigned int mNumVertices
	float mWeight - Weight of the AnimMesh. The initial value of the animMesh when the model is loaded in. Like when you load a model with shape keys,
					the shape keys will probably be initialized with whatever is in their associated mWeight.				

aiAnimation:
	aiMeshAnim* mMeshChannels[] - The Mesh Animation Channels. Each affects a single mesh
	unsigned int mNumMeshChannels
	aiMeshMorphAnim* mMorphMeshChannels[] - The morph mesh animation channels
	unsigned int mNumMorphMeshChannels

aiMeshAnim:
DESC: Describes Vertex-based animation for a single mesh or a group of meshes. Meshes carry the animation data for each frame in
their aiMesh::mAnimMeshes array. The purpose of aiMeshAnim is to define keyframes
linking each mesh attachment to a particular point in time.
	aiString mName - Name of the mesh to be animated
	unsigned int mNumKeys
	aiMeshKey mKeys[] - Keyframes of the animation.

aiMeshKey:
DESC: Binds an animMesh to a specific point in time.
	double mTime - The time of this key
	unsigned int mValue - Index into the aiMesh::mAnimMeshes array of the mesh corresponding to the aiMeshAnim hosting this key
						  frame. AKA the connection

aiMeshMorphAnim:
DESC: Describes a morphing animation of a given mesh
	aiString mName - Name of the mesh to be animated
	unsigned int mNumKeys
	aiMeshMorphKey mKeys[] - Keyframes of the animation

aiMeshMorphKey:
DESC: Binds a morph animMesh to a specific point in time
	double mTime
	unsigned int mValues[] - The values at the time of this key. Perhaps each index into a specific mAnimMeshes of the corresponding Mesh?
	double mWeights[] - The weights of each shapeKey at the time of this key
	unsigned int mNumValuesAndWeights
	
Seems like I want to be using aiMeshMorphAnim and aiMeshMorphKey instead of aiMeshAnim and aiMeshKey, as latter seems more for just vertex transformation.

May have to use Collada file formats

May use FBX as it supports Morph animation

In order for Textures to be able to be referenced by FBX, Blender dictates that nodes must use the PBR or whatever shader node.

Since there is a max number of vertex attribs, may have to rely on sending patch information as a texture

Since aiMeshMorphAnim.mName is kind of broken, have to remove * and anything after it of the string. Can refer to multiple meshes as shares name.